# Regression test suite for Python 3.13 with free-threading enabled (3.13t).
# This tests the parallelization features for selection and projection operations
# that are enabled when Python's free-threading mode is available.

name: Regression Suite (Python 3.13t)

on:
  push:
    branches-ignore:
      - main  # Exclude the main branch
      - 'refs/tags/*'  # Exclude tags (releases)
  schedule:
    - cron: "0 5 * * *"  # Run at 5:00 AM UTC every day (offset from main suite)
  workflow_dispatch:  # Allow manual triggering

jobs:
  regression_python_313t:
    name: Python 3.13t Free-Threading
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Install Python 3.13t (free-threading) from deadsnakes
        run: |
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt-get update
          # Install Python 3.13 with free-threading support
          # Note: The 't' suffix denotes the free-threading build
          sudo apt-get install -y python3.13-nogil python3.13-nogil-dev python3.13-nogil-venv || \
          sudo apt-get install -y python3.13t python3.13t-dev python3.13t-venv || \
          sudo apt-get install -y python3.13-dev python3.13-venv
          
      - name: Set up Python 3.13t environment
        run: |
          # Create a virtual environment and use it
          python3.13-nogil -m venv venv || python3.13t -m venv venv || python3.13 -m venv venv
          echo "$GITHUB_WORKSPACE/venv/bin" >> $GITHUB_PATH
      
      - name: Verify free-threading is enabled
        run: |
          python --version
          python -c "import sys; print('Python version:', sys.version)"
          python -c "import sys; print('Free-threading available:', hasattr(sys, '_is_gil_disabled'))"
          python -c "import sys; print('GIL disabled:', sys._is_gil_disabled() if hasattr(sys, '_is_gil_disabled') else 'N/A')"
        
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip uv
          python -m uv pip install --upgrade numpy cython==3.1.3
          python -m uv pip install --upgrade -r $GITHUB_WORKSPACE/tests/requirements.txt
          python -m uv pip install --upgrade -r $GITHUB_WORKSPACE/pyproject.toml
          python setup.py build_ext --inplace -j 4

      - name: "Start Memcached Instance"
        run: |
            docker run -d --name my-memcached \
                       -p 11211:11211 \
                       memcached \
                       -m 16

      - name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_KEY }}'

      - name: Decode Astra (DataStax/Cassandra) Secure Connect Bundle
        run: |
          echo "${{ secrets.ASTRA_SECURE_BUNDLE_BASE64 }}" | base64 -d > secure-connect.zip

      - name: Run Regression Tests with Free-Threading
        run: python -m coverage run -m pytest --color=yes
        env:
          AZURE_STORAGE_CONNECTION_STRING: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;"
          MINIO_END_POINT: "s3.eu-west-2.amazonaws.com"
          GCP_PROJECT_ID: mabeldev
          MYSQL_USER: '${{ secrets.MYSQL_USER }}'
          MYSQL_PASSWORD: '${{ secrets.MYSQL_PASSWORD }}'
          POSTGRES_USER: '${{ secrets.POSTGRES_USER }}'
          POSTGRES_PASSWORD: '${{ secrets.POSTGRES_PASSWORD }}'
          POSTGRES_HOST: '${{ secrets.POSTGRES_HOST }}'
          MONGODB_CONNECTION: '${{ secrets.MONGODB_CONNECTION }}'
          MONGODB_DATABASE: opteryx
          COCKROACH_USER: '${{ secrets.COCKROACH_USER }}'
          COCKROACH_PASSWORD: '${{ secrets.COCKROACH_PASSWORD }}'
          REDIS_CONNECTION: '${{ secrets.REDIS_CONNECTION }}'
          MEMCACHED_SERVER: 'localhost:11211'
          DATASTAX_CLIENT_ID: '${{ secrets.DATASTAX_CLIENT_ID }}'
          DATASTAX_CLIENT_SECRET: '${{ secrets.DATASTAX_CLIENT_SECRET }}'
          OPTERYX_DEBUG: 1
          MAX_LOCAL_BUFFER_CAPACITY: 100
          MAX_CACHE_EVICTIONS_PER_QUERY: 4
          DATA_CATALOG_PROVIDER: 'ICEBERG'
          DATA_CATALOG_CONNECTION: '${{ secrets.DATA_CATALOG_CONNECTION }}'
          DATA_CATALOG_STORAGE: '${{ secrets.DATA_CATALOG_STORAGE }}'
          VALKEY_CONNECTION: '${{ secrets.VALKEY_CONNECTION }}'

      - name: Check Coverage
        run: python -m coverage report -m

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false
          flags: python-313t
