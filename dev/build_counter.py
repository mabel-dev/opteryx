import re
import subprocess
from pathlib import Path

from enum import Enum  # isort: skip

class VersionStatus(Enum):
    ALPHA = "alpha"
    BETA = "beta"
    RELEASE = "release"

__major_version__ = 0
__minor_version__ = 26
__revision_version__ = 0
__author__ = "@joocer"
__status__ = VersionStatus.BETA

__build__ = None
with open("opteryx/__version__.py", mode="r") as v:
    vers = v.read()
exec(vers)  # nosec

if __build__:
    __build__ = int(__build__) + 1
    __version__ = f"{__major_version__}.{__minor_version__}.{__revision_version__}" + f"-{__status__.value}.{__build__}" if __status__ != VersionStatus.RELEASE else ""

    VERSION_FILE_CONTENT = f"""# THIS FILE IS AUTOMATICALLY UPDATED DURING THE BUILD PROCESS
# DO NOT EDIT THIS FILE DIRECTLY

__build__ = {__build__}
__author__ = "{__author__}"
__version__ = "{__version__}"

# Store the version here so:
# 1) we don't load dependencies by storing it in __init__.py
# 2) we can import it in setup.py for the same reason
# 3) we can import it in the CLI for the same reason
    """

    # Save the build number to the build.py file
    with open("opteryx/__version__.py", "w") as f:
        f.write(VERSION_FILE_CONTENT)

__version__ = "notset"
with open("opteryx/__version__.py", mode="r") as v:
    vers = v.read()
exec(vers)  # nosec
print(__version__)

pyproject_path = Path("pyproject.toml")
pyproject_contents = pyproject_path.read_text()
pattern = re.compile(r'^(version\s*=\s*")[^"]*(")', re.MULTILINE)
updated_contents, replacements = pattern.subn(f'version = "{__version__}"', pyproject_contents, count=1)

if replacements == 0:
    msg = "Unable to locate version field in pyproject.toml"
    raise ValueError(msg)

pyproject_path.write_text(updated_contents)

subprocess.run(["git", "add", "opteryx/__version__.py", "pyproject.toml"])
