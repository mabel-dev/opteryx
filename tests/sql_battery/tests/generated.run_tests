# We asked ChatGPT and DeepSeek to test edge cases

SELECT * FROM $satellites WHERE gm IS NULL;
SELECT * FROM $planets WHERE mass = 0;
SELECT id, name, radius / NULLIF(density, 0) FROM $satellites WHERE density > 0;
SELECT id, name, mass / diameter FROM $planets WHERE diameter > 0;
SELECT s.name, p.name FROM $satellites AS s JOIN $planets AS p ON s.planetId = p.id WHERE s.radius > p.diameter;
SELECT planetId, COUNT(*) FROM $satellites GROUP BY planetId HAVING COUNT(*) > 10;
SELECT name, LENGTH(name) FROM $satellites WHERE LENGTH(name) < 3;
SELECT id, name, magnitude FROM $satellites WHERE magnitude < -10 OR magnitude > 10 ORDER BY magnitude DESC;
SELECT id, name FROM $planets WHERE meanTemperature BETWEEN -200 AND 500 ORDER BY meanTemperature DESC;
SELECT p.name, COUNT(s.id) FROM $planets AS p LEFT JOIN $satellites AS s ON p.id = s.planetId GROUP BY p.name ORDER BY COUNT(s.id) DESC;
SELECT id, name FROM $satellites WHERE name LIKE '%-%';
SELECT id, name, ROUND(gravity, 0) FROM $planets;
SELECT p.name, p.mass, s.name FROM $planets AS p RIGHT JOIN $satellites AS s ON p.id = s.planetId;
SELECT name, id FROM $planets WHERE name NOT LIKE '%e%';
SELECT id, name, ABS(density) FROM $satellites WHERE density < 0;
SELECT name, radius FROM $satellites ORDER BY radius NULLS FIRST;
SELECT p.name, COUNT(s.id) FROM $planets AS p LEFT JOIN $satellites AS s ON p.id = s.planetId WHERE s.id IS NULL GROUP BY p.name;
SELECT id, name, CASE WHEN albedo > 0.5 THEN 'HIGH' WHEN albedo BETWEEN 0.2 AND 0.5 THEN 'MEDIUM' ELSE 'LOW' END AS reflectivity FROM $satellites;
SELECT name, orbitalEccentricity FROM $planets WHERE orbitalEccentricity = 0;
SELECT name, gravity FROM $planets WHERE gravity BETWEEN 0 AND 0.1;
SELECT s.id, s.name, p.name FROM $satellites AS s LEFT JOIN $planets AS p ON s.planetId = p.id WHERE p.id IS NULL;
SELECT planetId, COUNT(*) FROM $satellites GROUP BY planetId ORDER BY COUNT(*) ASC;
SELECT id, name, ROUND(escapeVelocity / rotationPeriod, 2) AS escape_rotation_ratio FROM $planets WHERE rotationPeriod > 0;
SELECT p.name, s.name FROM $planets AS p FULL JOIN $satellites AS s ON p.id = s.planetId WHERE p.id IS NULL OR s.id IS NULL;
SELECT name, id, CAST(radius AS DECIMAL(10,3)) FROM $satellites;
SELECT id, name FROM $satellites ORDER BY RANDOM();
SELECT * FROM $satellites WHERE planetId IS NULL;
SELECT COUNT(*) FROM $planets WHERE mass = 0 OR diameter = 0;
SELECT s.id, s.name, p.name FROM $satellites AS s LEFT JOIN $planets AS p ON s.planetId = p.id WHERE p.id IS NULL;
SELECT id, name FROM $planets WHERE mass > 0 AND diameter = 0;
SELECT id, name, gm, radius FROM $satellites WHERE gm / NULLIF(radius, 0) > 1e6;
SELECT id, name FROM $planets WHERE name LIKE 'JUPITER%' ORDER BY name DESC;
SELECT planetId, COUNT(*) FROM $satellites GROUP BY planetId ORDER BY COUNT(*) DESC;
SELECT name, planetId FROM $satellites WHERE name = UPPER(name);
SELECT id, name FROM $planets WHERE gravity IS NOT NULL ORDER BY gravity DESC LIMIT 3;
SELECT id, name, ROUND(orbitalEccentricity, 5) FROM $planets WHERE orbitalEccentricity > 0;
SELECT id, name FROM $satellites WHERE name NOT LIKE '%moon%';
SELECT name, density FROM $satellites WHERE density BETWEEN 1 AND 3 ORDER BY density DESC;
SELECT name, LENGTH(name) FROM $satellites ORDER BY LENGTH(name) DESC LIMIT 5;
SELECT p.name, COUNT(s.id) FROM $planets AS p LEFT JOIN $satellites AS s ON p.id = s.planetId GROUP BY p.name HAVING COUNT(s.id) > 3;
SELECT name, albedo FROM $satellites WHERE albedo < 0 OR albedo > 1;
SELECT id, name, orbitalPeriod FROM $planets WHERE orbitalPeriod > 365 ORDER BY orbitalPeriod ASC;
SELECT name FROM $planets WHERE gravity > 10 ORDER BY gravity DESC;
SELECT s.name, p.name FROM $satellites AS s JOIN $planets AS p ON s.planetId = p.id WHERE s.radius > p.diameter;
SELECT p.name, p.mass, s.name FROM $planets AS p RIGHT JOIN $satellites AS s ON p.id = s.planetId;
SELECT id, name, COALESCE(density, 0) FROM $satellites;
SELECT p.name, p.mass, p.density FROM $planets AS p WHERE p.mass > 0 ORDER BY p.density DESC LIMIT 5;
SELECT planetId, COUNT(*) FROM $satellites GROUP BY planetId ORDER BY COUNT(*) ASC;
SELECT id, name, mass FROM $planets WHERE mass > 5 ORDER BY mass NULLS LAST;
SELECT name, id FROM $satellites ORDER BY RANDOM();
SELECT name, density FROM $planets WHERE density BETWEEN 1 AND 10 ORDER BY density DESC LIMIT 3;
SELECT name, magnitude FROM $satellites WHERE magnitude BETWEEN -5 AND 5 ORDER BY magnitude;
SELECT id, name FROM $satellites WHERE name LIKE '_o%';

SELECT p.name AS planet_name, s.name AS satellite_name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.density * s.density > 10000;
SELECT * FROM $satellites WHERE albedo IS NULL OR CAST(albedo AS INTEGER) = 0;
SELECT MAX(avg_gm) FROM (SELECT AVG(gm) AS avg_gm FROM $satellites GROUP BY planetId) AS A;
SELECT planetId, COUNT(*) AS moon_count FROM $satellites GROUP BY planetId HAVING moon_count > 10;
SELECT * FROM $satellites WHERE LENGTH(name) > 10 AND SUBSTRING(name, 1, 1) = 'M';
SELECT planetId, SUM(CASE WHEN radius > 1000 THEN 1 ELSE 0 END) AS large_moons FROM $satellites GROUP BY planetId;
SELECT p.name, s.name, p.mass * s.gm AS combined_mass FROM $planets p JOIN $satellites s ON p.id = s.planetId;
SELECT * FROM $satellites s JOIN (SELECT id FROM $planets WHERE surfacePressure IS NOT NULL) p ON s.planetId = p.id;
SELECT * FROM $satellites WHERE gm BETWEEN 1000 AND 2000 AND radius * density > 5000;
SELECT s.planetId, p.avg_mass FROM $satellites s JOIN (SELECT id, AVG(mass) AS avg_mass FROM $planets GROUP BY id) p ON s.planetId = p.id;
SELECT p.name || ' - ' || s.name AS planet_satellite FROM $planets p JOIN $satellites s ON p.id = s.planetId;
SELECT * FROM $planets p JOIN (SELECT DISTINCT planetId FROM $satellites WHERE albedo > 0.5) s ON p.id = s.planetId;
SELECT planetId, SUM(radius * density) AS total_mass_index FROM $satellites GROUP BY planetId;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.mass / s.gm > 100;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.surfacePressure IS NULL OR s.albedo IS NULL;
SELECT p.name, s.name, (p.mass * s.gm) / (p.diameter * s.radius) AS mass_radius_ratio FROM $planets p JOIN $satellites s ON p.id = s.planetId;
SELECT * FROM $satellites s JOIN (SELECT id, CONCAT('%', name, '%') AS name_pattern FROM $planets) p ON s.name = p.name_pattern AND s.planetId = p.id;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId JOIN (SELECT AVG(mass) AS avg_mass FROM $planets) m ON p.mass = m.avg_mass;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId JOIN (SELECT MAX(mass) * 0.1 AS max_mass_scaled FROM $planets) m ON p.mass = m.max_mass_scaled;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.density + s.density = p.density - s.density;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.rotationPeriod + s.magnitude = p.lengthOfDay - s.albedo;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.distanceFromSun * s.gm = p.perihelion / s.radius;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.aphelion + s.density = p.orbitalPeriod - s.magnitude;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.orbitalVelocity * s.albedo = p.orbitalInclination / s.gm;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.orbitalEccentricity + s.radius = p.obliquityToOrbit - s.density;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.meanTemperature * s.magnitude = p.surfacePressure / s.albedo;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.numberOfMoons + s.gm = p.mass - s.radius;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.escapeVelocity + s.albedo = p.rotationPeriod - s.gm;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.lengthOfDay * s.radius = p.distanceFromSun / s.density;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.perihelion + s.magnitude = p.aphelion - s.albedo;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.orbitalPeriod * s.gm = p.orbitalVelocity / s.radius;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.orbitalInclination + s.density = p.orbitalEccentricity - s.magnitude;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.obliquityToOrbit * s.albedo = p.meanTemperature / s.gm;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.surfacePressure + s.radius = p.numberOfMoons - s.density;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.mass * s.magnitude = p.diameter / s.albedo;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.rotationPeriod * s.density = p.lengthOfDay / s.magnitude;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.distanceFromSun + s.albedo = p.perihelion - s.gm;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.aphelion * s.radius = p.orbitalPeriod / s.density;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.orbitalVelocity + s.magnitude = p.orbitalInclination - s.albedo;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.orbitalEccentricity * s.gm = p.obliquityToOrbit / s.radius;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.meanTemperature + s.density = p.surfacePressure - s.magnitude;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.numberOfMoons * s.albedo = p.mass / s.gm;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.diameter + s.radius = p.gravity::double - s.density;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.escapeVelocity * s.magnitude = p.rotationPeriod / s.albedo;
SELECT p.name, s.name FROM $planets p JOIN $satellites s ON p.id = s.planetId WHERE p.lengthOfDay + s.gm = p.distanceFromSun - s.radius;