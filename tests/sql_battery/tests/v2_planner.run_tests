# UNION
# SELECT * FROM $planets UNION SELECT * FROM $planets;

# NEW JOINS
SELECT * FROM $planets LEFT ANTI JOIN $satellites USING(id);
SELECT * FROM $planets LEFT SEMI JOIN $satellites USING(id);
SELECT * FROM $planets LEFT ANTI JOIN $satellites ON $planets.id = $satellites.id;
SELECT * FROM $planets LEFT SEMI JOIN $satellites ON $planets.id = $satellites.id;
SELECT * FROM $planets LEFT ANTI JOIN $satellites ON $satellites.id = $planets.id;
SELECT * FROM $planets LEFT SEMI JOIN $satellites ON $satellites.id = $planets.id;
SELECT * FROM $planets AS P LEFT ANTI JOIN $satellites AS S ON P.id = S.id;
SELECT * FROM $planets AS P LEFT SEMI JOIN $satellites AS S ON P.id = S.id;
SELECT * FROM $planets AS P LEFT ANTI JOIN $satellites AS S USING(id);
SELECT * FROM $planets AS P LEFT SEMI JOIN $satellites AS S USING(id);

# EXPLAIN FORMAT
EXPLAIN ANALYZE FORMAT MERMAID SELECT * FROM $planets AS a INNER JOIN (SELECT id FROM $planets) AS b USING (id);

# DISTINCT ON
SELECT DISTINCT ON (planetId) planetId, name FROM $satellites;

#Â CONDITIONS IN AGGREGATES
SELECT SUM(DISTINCT id ORDER BY id) FROM $planets

# INNER JOIN with FULL OUTER JOIN
SELECT * FROM $planets AS p1 INNER JOIN $planets AS p2 ON p1.id = p2.id FULL OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# INNER JOIN with LEFT OUTER JOIN
SELECT * FROM $planets AS p1 INNER JOIN $planets AS p2 ON p1.id = p2.id LEFT OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# INNER JOIN with RIGHT OUTER JOIN
SELECT * FROM $planets AS p1 INNER JOIN $planets AS p2 ON p1.id = p2.id RIGHT OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# INNER JOIN with NATURAL JOIN
SELECT * FROM $planets AS p1 INNER JOIN $planets AS p2 ON p1.id = p2.id NATURAL JOIN $planets AS p3;

# INNER JOIN with LEFT ANTI JOIN
SELECT * FROM $planets AS p1 INNER JOIN $planets AS p2 ON p1.id = p2.id LEFT ANTI JOIN $planets AS p3 ON p1.id = p3.id;

# INNER JOIN with LEFT SEMI JOIN
SELECT * FROM $planets AS p1 INNER JOIN $planets AS p2 ON p1.id = p2.id LEFT SEMI JOIN $planets AS p3 ON p1.id = p3.id;

# FULL OUTER JOIN with LEFT OUTER JOIN
SELECT * FROM $planets AS p1 FULL OUTER JOIN $planets AS p2 ON p1.id = p2.id LEFT OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# FULL OUTER JOIN with RIGHT OUTER JOIN
SELECT * FROM $planets AS p1 FULL OUTER JOIN $planets AS p2 ON p1.id = p2.id RIGHT OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# FULL OUTER JOIN with NATURAL JOIN
SELECT * FROM $planets AS p1 FULL OUTER JOIN $planets AS p2 ON p1.id = p2.id NATURAL JOIN $planets AS p3;

# FULL OUTER JOIN with LEFT ANTI JOIN
SELECT * FROM $planets AS p1 FULL OUTER JOIN $planets AS p2 ON p1.id = p2.id LEFT ANTI JOIN $planets AS p3 ON p1.id = p3.id;

# FULL OUTER JOIN with LEFT SEMI JOIN
SELECT * FROM $planets AS p1 FULL OUTER JOIN $planets AS p2 ON p1.id = p2.id LEFT SEMI JOIN $planets AS p3 ON p1.id = p3.id;

# LEFT OUTER JOIN with RIGHT OUTER JOIN
SELECT * FROM $planets AS p1 LEFT OUTER JOIN $planets AS p2 ON p1.id = p2.id RIGHT OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# LEFT OUTER JOIN with NATURAL JOIN
SELECT * FROM $planets AS p1 LEFT OUTER JOIN $planets AS p2 ON p1.id = p2.id NATURAL JOIN $planets AS p3;

# LEFT OUTER JOIN with LEFT ANTI JOIN
SELECT * FROM $planets AS p1 LEFT OUTER JOIN $planets AS p2 ON p1.id = p2.id LEFT ANTI JOIN $planets AS p3 ON p1.id = p3.id;

# LEFT OUTER JOIN with LEFT SEMI JOIN
SELECT * FROM $planets AS p1 LEFT OUTER JOIN $planets AS p2 ON p1.id = p2.id LEFT SEMI JOIN $planets AS p3 ON p1.id = p3.id;

# RIGHT OUTER JOIN with NATURAL JOIN
SELECT * FROM $planets AS p1 RIGHT OUTER JOIN $planets AS p2 ON p1.id = p2.id NATURAL JOIN $planets AS p3;

# RIGHT OUTER JOIN with LEFT ANTI JOIN
SELECT * FROM $planets AS p1 RIGHT OUTER JOIN $planets AS p2 ON p1.id = p2.id LEFT ANTI JOIN $planets AS p3 ON p1.id = p3.id;

# RIGHT OUTER JOIN with LEFT SEMI JOIN
SELECT * FROM $planets AS p1 RIGHT OUTER JOIN $planets AS p2 ON p1.id = p2.id LEFT SEMI JOIN $planets AS p3 ON p1.id = p3.id;

# LEFT ANTI JOIN with LEFT SEMI JOIN
SELECT * FROM $planets AS p1 LEFT ANTI JOIN $planets AS p2 ON p1.id = p2.id LEFT SEMI JOIN $planets AS p3 ON p1.id = p3.id;

# INNER JOIN with INNER JOIN
SELECT * FROM $planets AS p1 INNER JOIN $planets AS p2 ON p1.id = p2.id INNER JOIN $planets AS p3 ON p1.id = p3.id;

# FULL OUTER JOIN with FULL OUTER JOIN
SELECT * FROM $planets AS p1 FULL OUTER JOIN $planets AS p2 ON p1.id = p2.id FULL OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# LEFT OUTER JOIN with LEFT OUTER JOIN
SELECT * FROM $planets AS p1 LEFT OUTER JOIN $planets AS p2 ON p1.id = p2.id LEFT OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# RIGHT OUTER JOIN with RIGHT OUTER JOIN
SELECT * FROM $planets AS p1 RIGHT OUTER JOIN $planets AS p2 ON p1.id = p2.id RIGHT OUTER JOIN $planets AS p3 ON p1.id = p3.id;

# LEFT ANTI JOIN with LEFT ANTI JOIN
SELECT * FROM $planets AS p1 LEFT ANTI JOIN $planets AS p2 ON p1.id = p2.id LEFT ANTI JOIN $planets AS p3 ON p1.id = p3.id;

# LEFT SEMI JOIN with LEFT SEMI JOIN
SELECT * FROM $planets AS p1 LEFT SEMI JOIN $planets AS p2 ON p1.id = p2.id LEFT SEMI JOIN $planets AS p3 ON p1.id = p3.id;

SELECT Company, Rocket, MIN(Price), MAX(Price) FROM $missions GROUP BY ALL; -- Basic GROUP BY ALL test  
SELECT Company, Rocket, COUNT(*), AVG(Price) FROM $missions GROUP BY ALL; -- COUNT and AVG with GROUP BY ALL  
SELECT Company, Rocket, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice, SUM(Price) AS TotalPrice FROM $missions WHERE Price IS NOT NULL GROUP BY ALL; -- Ensuring NULL filtering works  
SELECT Company, Rocket, MIN(Price), MAX(Price) FROM $missions WHERE Rocket IS NOT NULL GROUP BY ALL; -- Ensuring NULL filtering on non-aggregated columns   
SELECT Company, Rocket, COALESCE(MIN(Price), 0) FROM $missions GROUP BY ALL; -- COALESCE with GROUP BY ALL  
SELECT Company, Rocket, MAX(LENGTH(Rocket)) FROM $missions GROUP BY ALL; -- Aggregation on function results  
SELECT Company, Rocket, MAX(Price) - MIN(Price) FROM $missions GROUP BY ALL; -- Derived column based on aggregations  
SELECT Company, Rocket, COUNT(DISTINCT Location) FROM $missions GROUP BY ALL; -- DISTINCT within aggregation  
SELECT Company, Rocket, MAX(Price) FROM $missions GROUP BY ALL HAVING MAX(Price) > 500; -- HAVING clause with GROUP BY ALL  
SELECT Company, Rocket, ARRAY_AGG(Location) FROM $missions GROUP BY ALL; -- ARRAY_AGG with GROUP BY ALL  
SELECT Company, Rocket, MIN(Price) FROM $missions WHERE Company IN ('SpaceX', 'Blue Origin') GROUP BY ALL; -- Filtering specific values with GROUP BY ALL   
